generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AudioUpload {
  id        String    @id @default(cuid())
  fileName  String
  s3Path    String    @unique
  status    String    @default("PENDING") // PENDING, UPLOADED, QUEUED, PROCESSING, COMPLETED, FAILED
  duration  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  speakers Speaker
  segments TranscriptionSegment
  results  AnalysisResult
}

model Speaker {
  id           String    @id @default(cuid())
  speakerLabel String // e.g., "A", "B" from the API

  uploadId    String
  audioUpload AudioUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  segments TranscriptionSegment
  results  AnalysisResult

  @@unique([uploadId, speakerLabel])
}

model TranscriptionSegment {
  id             String    @id @default(cuid())
  text           String    @db.Text
  startTime      Float
  endTime        Float
  sentiment      String? // POSITIVE, NEGATIVE, NEUTRAL
  sentimentScore Float?

  uploadId    String
  audioUpload AudioUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  speakerId String
  speaker   Speaker @relation(fields: [speakerId], references: [id], onDelete: Cascade)

  words WordTimestamp
}

model WordTimestamp {
  id        String  @id @default(cuid())
  word      String
  startTime Float
  endTime   Float

  segmentId String
  segment   TranscriptionSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
}

model AnalysisResult {
  id                String @id @default(cuid())
  totalSpokenTime   Float
  totalAttendedTime Float

  uploadId String
  upload   AudioUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  speakerId String
  speaker   Speaker @relation(fields: [speakerId], references: [id], onDelete: Cascade)

  @@unique([uploadId, speakerId])
}